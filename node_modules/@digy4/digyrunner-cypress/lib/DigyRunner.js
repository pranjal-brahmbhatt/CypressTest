// Copyright (c) 2022 Digy4 Inc. and its affiliates. All rights reserved.
// Unauthorized copying of this file, via any medium is strictly prohibited
// Proprietary and confidential
// Any illegal or unauthorized usage or violations will result in immediate legal action.

const {v4: uuidv4} = require("uuid");
const DigyUtils = require("./DigyUtils");
const got = require("got");
const fs = require("fs");

let DigyRunner = {
  tenantId: "",
  valid: true,
  sessionIds: [],
  terminalLogIndex: 0,
  metaData: {
    projectName: "",
    teamName: "",
    buildId: "",
    suiteName: "",
    appVersion: "",
    environment: "",
    framework: "cypress",
    moduleName: "",
    tester: "",
    ba: "",
    developer: "",
    browserName: "",
    browserVersion: "",
    _id: "",
    testType: "",
    lob: "",
    release: "",
    application: "",
    testStage: "",
    gtmName: ""
  },

  testResultSummary: {
    passedCount: 0,
    failedCount: 0,
    errorCount: 0,
    startTime: Date.now(),
    endTime: Date.now()
  },

  capabilities: {
    browser: {},
    platform: "",
    proxy: {},
    timeouts: {}
  },

  constants: {
    RESULT_SUMMARY_API_PATH: "resultsSummary",
    SSL_PORT: "443",
    RESULTS_SUMMARY_URL: "",
    RESULTS_URL: "",
    CLIENT_ID: "",
    CLIENT_SECRET: "",
    DISABLE_VIDEO_UPLOAD: "false"
  },

  _getStartWeekTimeFromStartTime: (startTime) => {
    const startDate = new Date(startTime);
    const startDay = startDate.getDay();
    const  diff = startDate.getDate() - startDay + (startDay == 0 ? -6 : 1);
    const startWeek = new Date(startDate.setDate(diff));
    startWeek.setHours(0,0,0,0);
    return startWeek.getTime();
  },

  _getTestSuiteStartTimeInMs: () => {
     return DigyRunner.testResultSummary.startTime;
  },

  _getResultSummaryId: () => {
    return DigyRunner.metaData.projectName + '#' +
            DigyRunner.metaData.teamName + '#' +
            DigyRunner.metaData.buildId;
  },

  _getHubUrl: (digyRunnerConfig, isCompleteUrlNeeded) => {
    let hubUrl = digyRunnerConfig.PROTOCOL + '://';
    hubUrl += digyRunnerConfig.HOSTNAME;
    return hubUrl;
  },

  _getCompleteHubUrl: (digyRunnerConfig) => {
    return DigyRunner._getHubUrl(digyRunnerConfig, false);
  },

  _getSafeHubUrl: (digyRunnerConfig) => {
    return DigyRunner._getHubUrl(digyRunnerConfig, false);
  },

  _getTimeDifferenceInMs(){
    return DigyRunner.testResultSummary.endTime - DigyRunner.testResultSummary.startTime;
  },

  _getHubId(digyRunnerConfig){
    return digyRunnerConfig.HOSTNAME;
  },

  _makeCapabilities(spec) {
    DigyRunner.capabilities.browser = spec.browser
    DigyRunner.capabilities.platform = spec.config.platform
    DigyRunner.capabilities.proxy = {
      proxyUrl: spec.config.proxyUrl,
      proxyServer: spec.config.proxyServer
    }
    DigyRunner.capabilities.timeouts = {
      defaultCommandTimeout: spec.config.defaultCommandTimeout,
      execTimeout: spec.config.execTimeout,
      pageLoadTimeout: spec.config.pageLoadTimeout,
      requestTimeout: spec.config.requestTimeout,
      responseTimeout: spec.config.responseTimeout,
      taskTimeout: spec.config.taskTimeout
    }
  },

  setup: async (on, config, plugins = []) => {

      console.log('Initializing DigyRunner...');

      const threadId = uuidv4();

      const digy4PlugIn = (on) => {
          on('task', {
            threadId() {
              return threadId
            }
          });

          on('before:run', async (spec) => {
            console.log(`before run! ${threadId}`)
            await DigyRunner.init(spec, config.digyRunnerConfig);
          });

          on('after:spec', async (spec, results) => {
            console.log(`after spec! ${threadId}`)
            await DigyRunner.sendResult(config, spec, results, threadId)
          });

          on('after:run', async (results) => {
            console.log(`after run! ${threadId}`)
            await DigyRunner.sendResultSummaryForFinish(config.digyRunnerConfig, 'Completed', results)
          });
      };

      plugins.push(digy4PlugIn);

      const eventCallbacks = {};

      plugins.forEach((plugin, index) => {
          const pluginName = `plugin-${index}`;

          plugin((eventName, callback) => {
            if (eventName === 'task') {
              return on('task', callback)
            }

            if (!eventCallbacks[eventName]) {
              eventCallbacks[eventName] = {};
            }
            if (!eventCallbacks[eventName][pluginName]) {
              eventCallbacks[eventName][pluginName] = [];
            }

            // Group all callbacks for the same event
            eventCallbacks[eventName][pluginName]?.push(callback);

            // Call all the callbacks for the appropriate event
            on(eventName, async (...args) => {
              const pluginCallbacks = Object.values(eventCallbacks[eventName] || {}).flat();
              for (const pluginCallback of pluginCallbacks) {
                if (plugin.length > 1) {
                  await pluginCallback(...args, config);
                } else {
                  await pluginCallback(...args);
                }
              }
            });
          }, config);
      });

  },

  init: async (spec, digyRunnerConfig) => {
    const id = uuidv4();
    DigyRunner._makeCapabilities(spec);

    digyRunnerConfig.BUILD_ID = process.env.BUILD_ID;
    digyRunnerConfig.RESULTS_SUMMARY_URL = process.env.RESULTS_SUMMARY_URL ? process.env.RESULTS_SUMMARY_URL : digyRunnerConfig.RESULTS_SUMMARY_URL;
    digyRunnerConfig.RESULTS_URL = process.env.RESULTS_URL ? process.env.RESULTS_URL : digyRunnerConfig.RESULTS_URL;
    digyRunnerConfig.CLIENT_ID = process.env.CLIENT_ID ? process.env.CLIENT_ID : digyRunnerConfig.CLIENT_ID;
    digyRunnerConfig.CLIENT_SECRET = process.env.CLIENT_SECRET ? process.env.CLIENT_SECRET : digyRunnerConfig.CLIENT_SECRET;
    digyRunnerConfig.PROJECT_PLAN_URL = process.env.PROJECT_PLAN_URL ? process.env.PROJECT_PLAN_URL : digyRunnerConfig.PROJECT_PLAN_URL;
    digyRunnerConfig.LOGS_UPLOAD_BASE_URL = process.env.LOGS_UPLOAD_BASE_URL ? process.env.LOGS_UPLOAD_BASE_URL : digyRunnerConfig.LOGS_UPLOAD_BASE_URL;
    digyRunnerConfig.PROJECT_NAME = process.env.PROJECT_NAME ? process.env.PROJECT_NAME : digyRunnerConfig.PROJECT_NAME;
    digyRunnerConfig.TEAM_NAME = process.env.TEAM_NAME ? process.env.TEAM_NAME : digyRunnerConfig.TEAM_NAME;
    digyRunnerConfig.SUITE_NAME = process.env.SUITE_NAME ? process.env.SUITE_NAME : digyRunnerConfig.SUITE_NAME;
    digyRunnerConfig.APP_VERSION = process.env.APP_VERSION ? process.env.APP_VERSION : digyRunnerConfig.APP_VERSION;
    digyRunnerConfig.ENVIRONMENT = process.env.ENVIRONMENT ? process.env.ENVIRONMENT : digyRunnerConfig.ENVIRONMENT;
    digyRunnerConfig.FRAMEWORK = process.env.FRAMEWORK ? process.env.FRAMEWORK : digyRunnerConfig.FRAMEWORK;
    digyRunnerConfig.MODULE_NAME = process.env.MODULE_NAME ? process.env.MODULE_NAME : digyRunnerConfig.MODULE_NAME;
    digyRunnerConfig.TESTER = process.env.TESTER ? process.env.TESTER : digyRunnerConfig.TESTER;
    digyRunnerConfig.BA = process.env.BA ? process.env.BA : digyRunnerConfig.BA;
    digyRunnerConfig.DEVELOPER = process.env.DEVELOPER ? process.env.DEVELOPER : digyRunnerConfig.DEVELOPER;
    digyRunnerConfig.TEST_TYPE = process.env.TEST_TYPE ? process.env.TEST_TYPE : digyRunnerConfig.TEST_TYPE;
    digyRunnerConfig.LOB = process.env.LOB ? process.env.LOB : digyRunnerConfig.LOB;
    digyRunnerConfig.RELEASE = process.env.RELEASE ? process.env.RELEASE : digyRunnerConfig.RELEASE;
    digyRunnerConfig.APPLICATION = process.env.APPLICATION ? process.env.APPLICATION : digyRunnerConfig.APPLICATION;
    digyRunnerConfig.DISABLE_VIDEO_UPLOAD = process.env.DISABLE_VIDEO_UPLOAD ? process.env.DISABLE_VIDEO_UPLOAD : digyRunnerConfig.DISABLE_VIDEO_UPLOAD ? 'true' : 'false';
    digyRunnerConfig.TEST_STAGE = process.env.TEST_STAGE ? process.env.TEST_STAGE : digyRunnerConfig.TEST_STAGE
    digyRunnerConfig.GTM_NAME = process.env.GTM_NAME ? process.env.GTM_NAME : digyRunnerConfig.GTM_NAME

    if (!(digyRunnerConfig.RESULTS_SUMMARY_URL && digyRunnerConfig.RESULTS_URL &&
        digyRunnerConfig.CLIENT_ID && digyRunnerConfig.CLIENT_SECRET && digyRunnerConfig.PROJECT_PLAN_URL &&
        digyRunnerConfig.LOGS_UPLOAD_BASE_URL)) {
      throw new Error('missing required configuration!')
    }
    if (!digyRunnerConfig.BUILD_ID) {
      digyRunnerConfig.BUILD_ID = 'AUTO-' + uuidv4();
    }

    DigyRunner.constants.RESULTS_SUMMARY_URL = digyRunnerConfig.RESULTS_SUMMARY_URL.trim();
    DigyRunner.constants.RESULTS_URL = digyRunnerConfig.RESULTS_URL.trim();
    DigyRunner.constants.CLIENT_ID = digyRunnerConfig.CLIENT_ID.trim();
    DigyRunner.constants.CLIENT_SECRET = digyRunnerConfig.CLIENT_SECRET.trim();
    DigyRunner.constants.PROJECT_PLAN_URL = digyRunnerConfig.PROJECT_PLAN_URL.trim();
    DigyRunner.constants.LOGS_UPLOAD_BASE_URL = digyRunnerConfig.LOGS_UPLOAD_BASE_URL.trim();
    DigyRunner.constants.DISABLE_VIDEO_UPLOAD = digyRunnerConfig.DISABLE_VIDEO_UPLOAD.trim();

    DigyRunner.metaData.projectName = digyRunnerConfig.PROJECT_NAME.trim();
    DigyRunner.metaData.teamName = digyRunnerConfig.TEAM_NAME.trim();
    DigyRunner.metaData.buildId = digyRunnerConfig.BUILD_ID.trim();
    DigyRunner.metaData.suiteName = digyRunnerConfig.SUITE_NAME.trim();
    DigyRunner.metaData.appVersion = digyRunnerConfig.APP_VERSION.trim();
    DigyRunner.metaData.environment = digyRunnerConfig.ENVIRONMENT.trim();
    //DigyRunner.metaData.framework = digyRunnerConfig.FRAMEWORK.trim();
    DigyRunner.metaData.moduleName = digyRunnerConfig.MODULE_NAME.trim();
    DigyRunner.metaData.tester = digyRunnerConfig.TESTER.trim();
    DigyRunner.metaData.ba = digyRunnerConfig.BA.trim();
    DigyRunner.metaData.developer = digyRunnerConfig.DEVELOPER.trim();
    DigyRunner.metaData.browserName = spec.browser ? spec.browser.name : "";
    DigyRunner.metaData.browserVersion = spec.browser ? spec.browser.version : "";
    DigyRunner.metaData._id = id.trim();
    DigyRunner.metaData.testType = digyRunnerConfig.TEST_TYPE ? digyRunnerConfig.TEST_TYPE.trim(): "WEB";
    DigyRunner.metaData.lob = digyRunnerConfig.LOB ? digyRunnerConfig.LOB.trim(): "";
    DigyRunner.metaData.release = digyRunnerConfig.RELEASE ? digyRunnerConfig.RELEASE.trim(): "";
    DigyRunner.metaData.application = digyRunnerConfig.APPLICATION ? digyRunnerConfig.APPLICATION.trim() : "";
    DigyRunner.metaData.testStage = digyRunnerConfig.TEST_STAGE ? digyRunnerConfig.TEST_STAGE.trim() : "";
    DigyRunner.metaData.gtmName = digyRunnerConfig.GTM_NAME ? digyRunnerConfig.GTM_NAME.trim() : "";

    DigyRunner.testResultSummary ={
      passedCount: 0,
      failedCount: 0,
      errorCount: 0,
      skippedCount: 0,
      pendingCount: 0,
      totalCount: 0,
      startTime: Date.now(),
      endTime: Date.now(),
      _id: DigyRunner.metaData._id,
      suiteName: DigyRunner.metaData.suiteName,
      appVersion: DigyRunner.metaData.appVersion,
      framework: DigyRunner.metaData.framework,
      environment: DigyRunner.metaData.environment,
      moduleName: DigyRunner.metaData.moduleName,
      testType: DigyRunner.metaData.testType,
      lob: DigyRunner.metaData.lob,
      release: DigyRunner.metaData.release,
      application: DigyRunner.metaData.application,
      cloudFarm: "LOCAL", // temporary
    }
    const response = await DigyUtils.validateProjectName(DigyRunner.constants.PROJECT_PLAN_URL, DigyRunner.constants.CLIENT_ID,
      DigyRunner.constants.CLIENT_SECRET, DigyRunner.metaData.projectName);
    DigyRunner.valid = response.valid;
    if (DigyRunner.valid) {
      DigyRunner.tenantId = response.tenantId;
    }
    await DigyRunner.sendResultSummaryForInit(digyRunnerConfig, 'InProgress');
  },

  sendResult: async (config, spec, results, threadId) => {
    if (!DigyRunner.valid) {
      return;
    }

    //console.log('Updating test result, result from cypress: ' + JSON.stringify(results));
    //console.log('Updating test result, spec from cypress: ' + JSON.stringify(spec));

    DigyRunner.terminalLogIndex++;

    let apiLogsForSpec;
    try {
      let apiLogsFile = fs.readFileSync(`${DigyUtils.logsPath}/${threadId}-apilogs.json`);
      apiLogsForSpec = JSON.parse(apiLogsFile);
    } catch (err) {
      apiLogsForSpec = [];
    }

    let testRunCount = 0;
    for (let i=0; i < results.tests.length; i++) {
      let apiLogsForTest;
      try {
        apiLogsForTest = apiLogsForSpec[i];
      } catch (err) {
        apiLogsForTest = [];
      }
      const sessionId = uuidv4();
      DigyRunner.sessionIds.push(sessionId);
      const resultType = results.tests[i].state === 'pending' ? 'PENDING' :
          results.tests[i].state === 'skipped' ? 'SKIPPED' :
          results.tests[i].state === 'passed' ? 'PASS' :
          results.tests[i].state === 'failed' ? 'FAIL' : 'UNKNOWN';

      const resultMessage = results.tests[i].state === 'passed' ? 'Executed Successfully' :
          results.tests[i].state === 'skipped' ? 'Skipped' :
          results.tests[i].state === 'pending' ? 'Pending' :
          results.tests[i].displayError;

      const startTime = Date.parse(results.stats.wallClockStartedAt ? results.stats.wallClockStartedAt : results.stats.startedAt);
      const endTime = Date.parse(results.stats.wallClockEndedAt ? results.stats.wallClockEndedAt : results.stats.endedAt);
      const durationMs = results.stats.wallClockDuration ? results.stats.wallClockDuration : results.stats.duration;
      const specName = results.spec.baseName ? results.spec.baseName : spec.name;

      const testResultPayload = {
        id: DigyRunner._getResultSummaryId(),
        teamName: DigyRunner.metaData.teamName,
        hubUrl: DigyRunner._getSafeHubUrl(config.digyRunnerConfig),
        hubId: DigyRunner._getHubId(config.digyRunnerConfig),
        testResult: resultType,
        projectName: DigyRunner.metaData.projectName,
        buildId: DigyRunner.metaData.buildId,
        startTime: startTime,
        durationMs: durationMs,
        sessionId: sessionId,
        endTime: endTime,
        testCaseName: specName + ' > ' + results.tests[i].title[1],
        testResultMessage: resultMessage,
        resultSummaryStartTime: DigyRunner._getTestSuiteStartTimeInMs(),
        browserName: DigyRunner.metaData.browserName,
        browserVersion: DigyRunner.metaData.browserVersion,
        eventSessionIds: [],
        scriptErrors: "",
        capabilities: JSON.stringify(DigyRunner.capabilities),
        resultSummaryId: DigyRunner._getResultSummaryId(),
        deviceName: "NA", // temporary
        deviceVersion: "NA", // temporary
        moduleName: DigyRunner.metaData.moduleName,
        tester: DigyRunner.metaData.tester,
        ba: DigyRunner.metaData.ba,
        developer: DigyRunner.metaData.developer,
        suiteName: DigyRunner.metaData.suiteName,
        environment: DigyRunner.metaData.environment,
        testType: DigyRunner.testResultSummary.testType,
        cloudFarm: DigyRunner.testResultSummary.cloudFarm,
        framework: DigyRunner.testResultSummary.framework,
        tenantId: DigyRunner.tenantId,
        terminalLogIndex: DigyRunner.terminalLogIndex,
        specName: specName,
        apiRequestResponseLogs: apiLogsForTest,
        lob: DigyRunner.metaData.lob,
        release: DigyRunner.metaData.release,
        application: DigyRunner.metaData.application,
        appVersion: DigyRunner.testResultSummary.appVersion,
        testStage: DigyRunner.metaData.testStage,
        gtmName: DigyRunner.metaData.gtmName,
      };

      const headers = {
        "content-type": "application/json"
      };

      console.log('Updating test result');
      await got.post(DigyRunner.constants.RESULTS_URL, {headers: headers, body: JSON.stringify(testResultPayload)})

      let removeFile = false;
      if (i === results.tests.length - 1) {
        removeFile = true;
      }
      if (results.tests[i].state !== 'pending' && results.tests[i].state !== 'skipped'){
        try {
          await DigyUtils.uploadDriverLogs(DigyRunner.constants.LOGS_UPLOAD_BASE_URL, DigyRunner.tenantId, DigyRunner.metaData.buildId, sessionId, spec, results, threadId, i, removeFile);
          await DigyUtils.uploadScreenshot(DigyRunner.constants.LOGS_UPLOAD_BASE_URL, DigyRunner.tenantId, DigyRunner.metaData.buildId, results, sessionId, testRunCount);

          // video not supported in firefox
          if (DigyRunner.metaData.browserName !== 'firefox' && DigyRunner.constants.DISABLE_VIDEO_UPLOAD === 'false') {
            DigyUtils.videosPath = config.videosFolder;
            await DigyUtils.uploadVideo(DigyRunner.constants.LOGS_UPLOAD_BASE_URL, DigyRunner.tenantId, DigyRunner.metaData.buildId, results, sessionId, testRunCount);
          }
        } catch (err) {
          console.log('Error uploading logs (Not Fatal): ', err);
        }
        testRunCount++;
      }
    }


  },

  sendResultSummaryForInit: async (digyRunnerConfig, status) => {
    if (!DigyRunner.valid) {
      return;
    }
    await DigyRunner.sendResultSummary(digyRunnerConfig, status, undefined);
  },

  sendResultSummaryForFinish: async (digyRunnerConfig, status, results) => {
    if (!DigyRunner.valid) {
      return;
    }
    await DigyRunner.sendResultSummary(digyRunnerConfig, status, results);
    try {
      await DigyUtils.uploadTerminalLogs(DigyRunner.constants.LOGS_UPLOAD_BASE_URL, DigyRunner.tenantId, digyRunnerConfig.BUILD_ID, DigyRunner.testResultSummary.startTime);
    } catch (err) {
      console.log('Error uploading terminal logs (Not Fatal): ' +  err);
    }
  },

  sendResultSummary: async (digyRunnerConfig, status, results) => {
    if (!DigyRunner.valid) {
      return;
    }
    if (results) {
      DigyRunner.testResultSummary.passedCount = results.totalPassed;
      DigyRunner.testResultSummary.failedCount = results.totalFailed;
      DigyRunner.testResultSummary.skippedCount = results.totalSkipped;
      DigyRunner.testResultSummary.pendingCount = results.totalPending;
    }
    DigyRunner.testResultSummary.endTime = Date.now();
    const resultSummaryPayload = {
      _id: DigyRunner.testResultSummary._id,
      hubId: DigyRunner._getHubId(digyRunnerConfig),
      hubUrl: DigyRunner._getSafeHubUrl(digyRunnerConfig),
      resultSummaryId: DigyRunner._getResultSummaryId(),
      projectName: DigyRunner.metaData.projectName,
      teamName: DigyRunner.metaData.teamName,
      buildId: DigyRunner.metaData.buildId,
      suiteName: DigyRunner.testResultSummary.suiteName,
      appVersion: DigyRunner.testResultSummary.appVersion,
      browserName: DigyRunner.metaData.browserName,
      browserVersion: DigyRunner.metaData.browserVersion,
      deviceName: "NA", // temporary
      deviceVersion: "NA", // temporary
      passedCount: DigyRunner.testResultSummary.passedCount,
      failedCount: DigyRunner.testResultSummary.failedCount,
      errorCount: DigyRunner.testResultSummary.errorCount,
      skippedCount: DigyRunner.testResultSummary.skippedCount,
      pendingCount: DigyRunner.testResultSummary.pendingCount,
      totalCount: DigyRunner.testResultSummary.passedCount + DigyRunner.testResultSummary.failedCount + DigyRunner.testResultSummary.errorCount + DigyRunner.testResultSummary.skippedCount + DigyRunner.testResultSummary.pendingCount,
      startTime: DigyRunner.testResultSummary.startTime,
      endTime: DigyRunner.testResultSummary.endTime,
      durationMs: DigyRunner._getTimeDifferenceInMs(),
      status: status,
      framework: DigyRunner.testResultSummary.framework,
      environment: DigyRunner.testResultSummary.environment,
      moduleName: DigyRunner.testResultSummary.moduleName,
      testType: DigyRunner.testResultSummary.testType, // temporary
      cloudFarm: DigyRunner.testResultSummary.cloudFarm, // temporary
      tenantId: DigyRunner.tenantId,
      lob: DigyRunner.testResultSummary.lob,
      release: DigyRunner.testResultSummary.release,
      application: DigyRunner.testResultSummary.application,
      tester: DigyRunner.metaData.tester,
      ba: DigyRunner.metaData.ba,
      developer: DigyRunner.metaData.developer,
      testStage: DigyRunner.metaData.testStage,
      gtmName: DigyRunner.metaData.gtmName,
    };

    const headers = {
      "content-type": "application/json"
    };
    console.log('Updating test result summary');
    await got.post(DigyRunner.constants.RESULTS_SUMMARY_URL, {headers: headers, body: JSON.stringify(resultSummaryPayload)})
  }
};

module.exports = DigyRunner;
